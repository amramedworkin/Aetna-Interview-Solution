@startuml 12_Security_Architecture
!theme mars

skinparam HeaderFontSize 20
skinparam HeaderFontColor #00008B
header Aetna Interview Project

skinparam titleFontSize 30
title 12_Security_Architecture

skinparam LegendBackgroundColor #F2F2F2
skinparam LegendBorderColor #CCCCCC

actor "① User" as User <<[Actor]>>
component "② API Gateway\n<<[Gateway]>>" as APIGateway << (A, #ADD8E6) >>
component "③ Cognito Hosted UI\n<<[Auth]>>" as CognitoUI << (A, #ADD8E6) >>
component "④ Token Validation Layer\n<<[Security]>>" as TokenValidator << (A, #ADD8E6) >>
component "⑤ Spring Security\n<<[Security]>>" as SpringSecurity << (A, #ADD8E6) >>
database "⑥ PostgreSQL (IAM Auth)\n<<[Data Store]>>" as PostgreSQL << (D, #8FBC8F) >>
component "⑦ AWS Secrets Manager\n<<[Secrets]>>" as SecretsManager << (S, #FFA07A) >>

' -- Flow with Stereotypes --
User --> CognitoUI : ① Login <<OAuth2 Login>>
CognitoUI --> User : ② Returns JWT <<OAuth2 JWT>>

User --> APIGateway : ③ API Call <<JWT>>
APIGateway --> TokenValidator : ④ Verify Token <<Token Introspection>>
TokenValidator --> SpringSecurity : ⑤ Validate & Authorize <<Claims-Based Access>>

SpringSecurity --> SecretsManager : ⑥ Get DB Creds <<IAM>>
SpringSecurity --> PostgreSQL : ⑦ DB Query <<IAM Auth>>

legend bottom
|= # |= Component |= Description |= Category |
| ① | User | End user of the application | Actor |
| ② | API Gateway | First layer of defense, accepts only valid JWT | Security |
| ③ | Cognito Hosted UI | User login, registration, token issuing (OAuth2, JWT) | Identity |
| ④ | Token Validation Layer | Parses and validates JWT (checks expiration, issuer, audience) | Security |
| ⑤ | Spring Security | Enforces roles & route protection (uses roles/claims in JWT) | Security |
| ⑥ | PostgreSQL (IAM Auth) | Backend data store with IAM-based access control | Database |
| ⑦ | AWS Secrets Manager | Secure credential storage (fetched via IAM) | Security |
endlegend
@enduml
